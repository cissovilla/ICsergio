diff --git a/autonomous_mapping/src/autonomous_exploration.cpp b/autonomous_mapping/src/autonomous_exploration.cpp
index 7332f47..324b5ab 100644
--- a/autonomous_mapping/src/autonomous_exploration.cpp
+++ b/autonomous_mapping/src/autonomous_exploration.cpp
@@ -26,7 +26,8 @@ class AutonomousExploration:public pcl_ros::PCLNodelet
 public:
 	AutonomousExploration();
 	~AutonomousExploration();
-	void autonomousExplorationCallBack(const geometry_msgs::PoseArray& pose_msg);
+  //	void autonomousExplorationCallBack(const geometry_msgs::PoseArray& pose_msg);
+  void autonomousExplorationCallBack(const geometry_msgs::Pose& pose_msg);
 	void pointcloudCallBack(const sensor_msgs::PointCloud2& pointcloud_msg);
 	void laserScannerSignalCallBack(const pr2_msgs::LaserScannerSignal laser_scanner_signal_msg);
 	void moveRobot(geometry_msgs::Pose goal_pose);
@@ -46,7 +47,8 @@ private:
 	ros::Publisher tilt_laser_traj_cmd_publisher_;
 	std::string subscribe_pose_topic_;
 	boost::thread spin_thread_;
-	geometry_msgs::PoseArray pose_msg_;
+  //	geometry_msgs::PoseArray pose_msg_;
+  geometry_msgs::Pose pose_msg_;
 	bool get_pointcloud_, received_pose_, received_laser_signal_,move_robot_, publish_cloud_incrementally_;
 	//ros::ServiceClient tilt_laser_client_;
 	pcl::PointCloud<pcl::PointXYZ> cloud_merged_;
@@ -83,35 +85,40 @@ void AutonomousExploration::onInit()
 }
 void AutonomousExploration::spin()
 {
+  ROS_INFO("in in spin");
 	ros::Rate loop(1);
 	while(pnh_->ok())
 	{
+	  ROS_INFO("in while");
 		loop.sleep();
 		if(received_pose_ )
 		{
-			for (int i=0;i<pose_msg_.poses.size();i++)
-			{
-				if (!move_robot_)
-				{
-					//move robot to the received pose
-					ROS_INFO("Moving the robot");
-					moveRobot(pose_msg_.poses[i]);
-					ROS_INFO("End of Moving the robot");
-				}
-				else break;
-
-            if (!move_robot_)
-            {
-			ROS_INFO("no good pose to navigate to");
-			exit(1);
-            }
+		  ROS_INFO("in if");
+			// for (int i=0;i<pose_msg_.poses.size();i++)
+			// {
+			// 	if (!move_robot_)
+			// 	{
+			// 		//move robot to the received pose
+			// 		ROS_INFO("Moving the robot");
+			//		moveRobot(pose_msg_.poses[i]);
+		  moveRobot(pose_msg_);
+			// 		ROS_INFO("End of Moving the robot");
+			// 	}
+			// 	else break;
+
+            // if (!move_robot_)
+            // {
+	    // 		ROS_INFO("no good pose to navigate to");
+	    // 		exit(1);
+            // }
 			//rise the spine up to scan
 			setLaserProfile("scan");
 			moveTorso(0.3, 1.0, "up");
 			double angles = 0.0;
 			while(angles <= 360)
 			{
-				geometry_msgs::Pose new_pose = pose_msg_.poses[i];
+			  //				geometry_msgs::Pose new_pose = pose_msg_.poses[i];
+			  geometry_msgs::Pose new_pose = pose_msg_;
 				btQuaternion q ( pcl::deg2rad(angles), 0, 0);
 
 				new_pose.orientation.x = q.x();
@@ -121,7 +128,7 @@ void AutonomousExploration::spin()
 				//setLaserProfile("scan");
 				moveRobot(new_pose);
 				//setLaserProfile("navigation");
-			}
+				//}
 				received_laser_signal_ = false;
 				while(!received_laser_signal_)
 				{
@@ -134,7 +141,7 @@ void AutonomousExploration::spin()
 				//get a point cloud
 				get_pointcloud_ = true;
 				angles += 30.0;
-			}
+				}
 			while (!get_pointcloud_)
 			{
 				loop.sleep();
@@ -151,12 +158,13 @@ void AutonomousExploration::spin()
 			//lower the spine to navigate some place else
 			moveTorso(0.01, 1.0, "down");
 			setLaserProfile("navigation");
-
 		}
+			//	}
 	}
 }
 void AutonomousExploration::moveRobot(geometry_msgs::Pose goal_pose)
 {
+  ROS_INFO("Moving the Robot");
 	actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> ac("move_base", true);
 
 	//wait for the action server to come up
@@ -323,7 +331,7 @@ void AutonomousExploration::pointcloudCallBack(const sensor_msgs::PointCloud2& p
 		get_pointcloud_ = false;
 	}
 }
-void AutonomousExploration::autonomousExplorationCallBack(const geometry_msgs::PoseArray& pose_msg)
+void AutonomousExploration::autonomousExplorationCallBack(const geometry_msgs::Pose& pose_msg)
 {
 	pose_msg_=pose_msg;
 	received_pose_ = true;
